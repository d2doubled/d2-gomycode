# -*- coding: utf-8 -*-
"""Final Year Project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HcqvYjKboI4sM6OnJYboeVXBKcD3u2hB
"""

import pandas as pd
import matplotlib.pyplot as plt
import plotly.express as px
import pickle
import numpy as np
pd.set_option('display.max_columns', 100)
pd.set_option('display.max_rows', 100)

df = pd.read_csv(r'C:\Users\HP\Desktop\Final_year_Project\salary_data_cleaned.csv')

df.shape

df.head(2)

df = df.drop('Salary Estimate', axis=1)

df = df.drop('company_txt', axis=1)

print(df['Job Description'][1])

df['java'] = df['Job Description'].apply(lambda x: 1 if 'java' in x.lower() else 0)

df['c++'] = df['Job Description'].apply(lambda x: 1 if 'c++' in x.lower() else 0)

df['hourly'].unique()

df['Company Name'] = df['Company Name'].str.split('\n').str[0]

df['Revenue'].replace('-1', np.nan, inplace=True)
df['Revenue'].replace('Unknown / Non-Applicable', np.nan, inplace=True)

df['Revenue'] = df['Revenue'].fillna(df['Revenue'].mode()[0])

df.describe()

df.info()

df.duplicated().sum()

df.dtypes

df.head(2)

df.shape

df = df.drop('Size' , axis=1)

df = df.drop('min_salary' , axis=1)

df = df.drop('max_salary' , axis=1)



df = df.drop('job_state' , axis=1)

for i in df['Job Title'].unique():
  print(i)

px.bar(df['Job Title'].value_counts())

px.bar(df, x='Company Name', y='avg_salary')

df['Job Title'] = df['Job Title'].fillna('Data Scientist').str.title()

df['Job Title'] = df['Job Title'].apply(lambda x: 'Data Analyst' if 'Data Analyst' in x else x)
df['Job Title'] = df['Job Title'].apply(lambda x: 'Data Scientist' if 'Data Scientist' in x else x)
df['Job Title'] = df['Job Title'].apply(lambda x: 'Data Scientist' if 'Data Engineer' in x else x)
df['Job Title'] = df['Job Title'].apply(lambda x: 'Data Scientist' if 'Machine Learning Engineer' in x else x)
df['Job Title'] = df['Job Title'].apply(lambda x: 'Data Analyst' if 'Medical Laboratory Scientist' in x else x)
df['Job Title'] = df['Job Title'].apply(lambda x: 'Data Analyst' if 'R&D Specialist/ Food Scientist' in x else x)
df['Job Title'] = df['Job Title'].apply(lambda x: 'Data Scientist' if 'Research Scientist' in x else x)
df['Job Title'] = df['Job Title'].apply(lambda x: 'Data Analyst' if 'Senior Research Scientist-Machine Learning' in x else x)
df['Job Title'] = df['Job Title'].apply(lambda x: 'Data Scientist' if 'Senior Data Scientist' in x else x)
df['Job Title'] = df['Job Title'].apply(lambda x: 'Data Scientist' if 'Senior Data Scientist' in x else x)
df['Job Title'] = df['Job Title'].apply(lambda x: 'Data Scientist' if 'Staff Scientist-Downstream Process Development' in x else x)
df['Job Title'] = df['Job Title'].apply(lambda x: 'Data Scientist' if 'Food Scientist - Developer' in x else x)
df['Job Title'] = df['Job Title'].apply(lambda x: 'Data Analyst' if 'Med Tech/Lab Scientist- South Coastal Lab' in x else x)
df['Job Title'] = df['Job Title'].apply(lambda x: 'Data Analyst' if 'Ana' in x else x)
df['Job Title'] = df['Job Title'].apply(lambda x: 'Data Analyst' if 'Staff Scientist-Downstream Process Development' in x else x)
df['Job Title'] = df['Job Title'].apply(lambda x: 'Data Analyst' if 'Scientist/Senior Scientist, Autoimmune' in x else x)
df['Job Title'] = df['Job Title'].apply(lambda x: 'Data Analyst' if 'Senior Data Scientist' in x else x)
df['Job Title'] = df['Job Title'].apply(lambda x: 'Data Analyst' if 'Principal Scientist, Hematology' in x else x)
df['Job Title'] = df['Job Title'].apply(lambda x: 'Data Analyst' if 'Senior Scientist, Biomedical' in x else x)
df['Job Title'] = df['Job Title'].apply(lambda x: 'Data Analyst' if 'Senior Scientist (Neuroscience)' in x else x)

df['Job Title'] = df['Job Title'].apply(lambda x: 'Data Analyst' if x != 'Data Scientist' else x)

for i in df['Job Title'].unique():
  print(i)

df['Job Title'].value_counts()

df['Job Title'].isna().sum()

px.bar(df['Job Title'].value_counts(),width = 500)



df.sort_values(by='Rating', ascending=False)

df['Rating'] = df['Rating'].abs()
df['Founded'] = df['Founded'].abs()

df

df.drop('age', axis=1, inplace=True)
df.drop('same_state', axis=1, inplace=True)

df.head(2)

df.head(2)

df['Type of ownership'] = df['Type of ownership'].str.title()

df['Type of ownership'].unique()

px.histogram(df, x='Job Title', y='avg_salary', color = 'Type of ownership')

df['Type of ownership'] = df['Type of ownership'].apply(lambda x: 'Private' if 'Company - Private' in x else x)
df['Type of ownership'] = df['Type of ownership'].apply(lambda x: 'Public' if 'Company - Public' in x else x)
df['Type of ownership'] = df['Type of ownership'].apply(lambda x: 'Private' if 'Other Organization' in x else x)
df['Type of ownership'] = df['Type of ownership'].apply(lambda x: 'Private' if 'Subsidiary Or Business Segment' in x else x)
df['Type of ownership'] = df['Type of ownership'].apply(lambda x: 'Private' if 'Nonprofit Organization' in x else x)
df['Type of ownership'] = df['Type of ownership'].apply(lambda x: 'Private' if 'Hospital' in x else x)
df['Type of ownership'] = df['Type of ownership'].apply(lambda x: 'Private' if 'School' in x else x)
df['Type of ownership'] = df['Type of ownership'].apply(lambda x: 'Private' if 'University' in x else x)
df['Type of ownership'] = df['Type of ownership'].apply(lambda x: 'Private' if 'College / University' in x else x)
df['Type of ownership'] = df['Type of ownership'].apply(lambda x: 'Public' if 'Government' in x else x)
df['Type of ownership'] = df['Type of ownership'].apply(lambda x: 'Private' if 'Nonprofit' in x else x)
df['Type of ownership'] = df['Type of ownership'].apply(lambda x: 'Public' if 'Local' in x else x)
df['Type of ownership'] = df['Type of ownership'].apply(lambda x: 'Public' if 'Local' in x else x)
df['Type of ownership'] = df['Type of ownership'].apply(lambda x: 'Private' if 'Self Employed' in x else x)
df['Type of ownership'] = df['Type of ownership'].apply(lambda x: 'Private' if 'Freelance' in x else x)
df['Type of ownership'] = df['Type of ownership'].apply(lambda x: 'Private' if '-1' in x else x)
df['Type of ownership'] = df['Type of ownership'].apply(lambda x: 'Public' if 'Unknown' in x else x)

px.bar(df['Type of ownership'].value_counts())

df['avg_salary'] = df['avg_salary'].apply(lambda x: df['avg_salary'].mean() if x < 0 else x)

from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.svm import SVR
from sklearn.neighbors import KNeighborsRegressor
from sklearn.ensemble import GradientBoostingRegressor
#from catboost import CatBoostRegressor
from sklearn.metrics import mean_squared_error
df = df.drop(columns = ['Job Description', 'hourly','Headquarters','hourly', 'Founded', 'employer_provided'])
from sklearn.preprocessing import MinMaxScaler
X = df.drop('avg_salary', axis=1)
y = df['avg_salary']

print(X.columns.tolist())

categorical_features = X.select_dtypes(include=['object']).columns

print(categorical_features.tolist())

# for feature in categorical_features:
#   le = LabelEncoder()
#   X[feature] = le.fit_transform(X[feature])

for feature in categorical_features:
    le = LabelEncoder()
    X[feature] = le.fit_transform(X[feature])
    
    # Save the encoder to a file named after the feature
    filename = f'stored_encoder_{feature}.pkl'
    pickle.dump(le, open(filename, 'wb'))

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)



#catboost_model = CatBoostRegressor(random_state = 42,verbose = 0)
#catboost_model.fit(X_train, y_train)


#y_pred = catboost_model.predict(X_test)

#print('The MSE is :', mean_squared_error(y_test, y_pred))
#print('The RMSE is :', np.sqrt(mean_squared_error(y_test, y_pred)))

model = LinearRegression()
model.fit(X_train, y_train)


y_pred = model.predict(X_test)

print('The MSE is :', mean_squared_error(y_test, y_pred))
print('The RMSE is :', np.sqrt(mean_squared_error(y_test, y_pred)))

decisiontree_model = DecisionTreeRegressor(random_state = 42)
decisiontree_model.fit(X_train, y_train)


y_pred = model.predict(X_test)

print('The MSE is :', mean_squared_error(y_test, y_pred))
print('The RMSE is :', np.sqrt(mean_squared_error(y_test, y_pred)))

import pickle
filename = 'stored_encoder.pkl'
pickle.dump(le, open(filename, 'wb'))

filename = 'stored_model.pkl'
pickle.dump(decisiontree_model, open(filename, 'wb'))

print('successfully')
